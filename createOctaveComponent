#!/usr/bin/python

'''
Command-line wrapper to the createOctaveComponent.py's create() method.

'''

from getopt import getopt
from redhawk.packagegen.octavePackage import OctavePackage
import sys
import os

# Default values
__PORT_TAG__          = '_port_'
__PROP_TAG__          = '_prop_'
__STRING_TAG__        = '_strprop_'
__COMPLEX_PROP_TAG__  = '_cprop_'

usage = """
Script for automatic component generation given an Octave m-function.

All Octave components will have a diaryOnOrOff property (string:"on" or "off",
default "off"), and a bufferingEnabled property (double: 1 or 0, default 0).

{0} [flags]

E.g.,

    {0}\\
        --function=foo \\
        --mFiles=foo.m,/home/user1/bar.m \\
        --sharedLibraries=/sharedPkgs/foo/foo.spd.xml

Required Flags:
    --mFiles            List of m files to be packaged with the component.
                        When listing multiple files, the filenames must be
                        comma-separated, with no spaces.

                            e.g., --mFiles=foo.m,/home/user1/bar.m

    --function          Name of function to be called.

                            e.g., --function=foo


Options:
    --sharedLibraries   Proprietary dependencies that have been installed
                        as a Soft Package Dependency. Points to an spd.xml file
                        whose path is relative to $SDRROOT/dom.

                            e.g., --sharedLibraries=/sharedPkgs/foo/foo.spd.xml

                            When listing multiple files, the filenames must be
                            comma-separated, with no spaces.

    --outputDir         Location of all output files.  Default is ".".

    -f                  Forward force flag to redhawk-codegen.

    --buildRpm          If set, compile an rpm after generating the code.

    --install           If set, run "reconf; configure; make install" after
                        generating the code.

    --enableDiary       If set, enable the Octave diary.  Diary will be written
                        to the logging directory (retrieved from log4cxx).

    --enableBuffering   If set, enable buffering.  If enabled, the component
                        will buffer data at its input until an EOS flag is
                        encountered. If disabled, packets will be sent
                        immediately to Octave, even if the EOS flag is not set.

""".format(os.path.basename(sys.argv[0]))

if __name__ == "__main__":
    opts, args = getopt(
        sys.argv[1:],
        'fh',
        ['outputDir=',
         'help',
         'sharedLibraries=',
         'mFiles=',
         'function=',
         'buildRpm',
         'install',
         'enableBuffering',
         'enableDiary'])

    outputDir        = "."
    force            = False
    sharedLibraries  = []
    mFiles           = None
    function         = None
    buildRpm         = False
    install          = False
    diaryEnabled     = False
    bufferingEnabled = False

    for key, value in opts:
        if key == '--help' or key == '-h':
            print usage
            raise SystemExit
        elif key == '--function':
            function= value
        elif key == '--outputDir':
            outputDir = value
        elif key == '--sharedLibraries':
            sharedLibraries = value.split(',')
        elif key == '--mFiles':
            mFiles = value.split(',')
        elif key == '--buildRpm':
            buildRpm = True
        elif key == '--install':
            install= True
        elif key == '--enableDiary':
            diaryEnabled = True
        elif key == '--enableBuffering':
            bufferingEnabled = True
        elif key == '-f':
            force = True

    if mFiles is None or function is None:
        print usage
        raise SystemExit

    myOctavePackage = OctavePackage(
        mFiles           = mFiles,
        function         = function,
        outputDir        = outputDir,
        sharedLibraries  = sharedLibraries,
        diaryEnabled     = diaryEnabled,
        bufferingEnabled = bufferingEnabled)

    myOctavePackage.writeXML()
    myOctavePackage.callCodegen(force)

    if buildRpm:
        myOctavePackage.runCompileRpm()
    if install:
        myOctavePackage.runInstall()
